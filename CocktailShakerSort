public class CocktailShakerSort{
    public static void main(String[] args) {
        int numbersToSort[] = {6, 10, 3, 7, 2, 8,4, 9, 1, 5};
        sort(numbersToSort);
        for(int i : numbersToSort){
            System.out.println(i);
        }
    }
    //The Cocktail Shaker Sort algorithm is a variation of the bubble sort algorithm.
    //It sorts an array of integers in ascending order by repeatedly swapping adjacent elements if they are in the wrong order.
    //The algorithm gets its name because it "shakes" the elements in the array like a cocktail shaker.
    // @param numbersToSort, the array of integers to be sorted

    public static void sort(int[] numbersToSort) {
        boolean swapped = true;
        int start = 0;
        int end = numbersToSort.length - 1;
        //The outer loop continues until no more swaps are needed.
        while (swapped) {
            swapped = false;
             //The inner loop iterates from the start of the array to the end - 1.
             //It checks each pair of adjacent elements and swaps them if they are in the wrong order.
            for (int i = start; i < end; i++) {
                if (numbersToSort[i] > numbersToSort[i + 1]) {
                    // swap numbers
                    int temp = numbersToSort[i];
                    numbersToSort[i] = numbersToSort[i + 1];
                    numbersToSort[i + 1] = temp;
                    swapped = true;
                }
            }
            //After the inner loop, the end index is decremented to focus on the next range of elements.
            end--;
            //If no swaps were made in the inner loop, the array is already sorted, and the outer loop can be exited.
            if (!swapped) break;
            //The outer loop continues from the end of the array to the start + 1.
            //It checks each pair of adjacent elements and swaps them if they are in the wrong order.
            for (int i = end - 1; i >= start; i--) {
                if (numbersToSort[i] > numbersToSort[i + 1]) {
                    // swap numbers
                    int temp = numbersToSort[i];
                    numbersToSort[i] = numbersToSort[i + 1];
                    numbersToSort[i + 1] = temp;
                    swapped = true;
                }
            }
            //After the outer loop, the start index is incremented to focus on the next range of elements.
            start++;
        }
    }
}
