// This class implements the Cocktail Shaker Sort (also known as Bidirectional Bubble Sort).
// It is an improvement over Bubble Sort that sorts in both directions in each pass.
public class CocktailShakerSort {

    // The main method serves as the entry point of the Java program.
    public static void main(String[] args) {
        // Initialize an unsorted array of integers.
        int numbersToSort[] = {6, 10, 3, 7, 2, 8, 4, 9, 1, 5}; 
        
        // Call the Cocktail Shaker Sort method to sort the array.
        sort(numbersToSort);

        // Print the sorted array.
        for (int i : numbersToSort) {
            System.out.print(i + "");
        }
    }
     
    /**
     * Sorts the input integer array using the Cocktail Shaker Sort algorithm.
     *
     * Cocktail Shaker Sort is a variation of Bubble Sort that sorts in both directions.
     * Instead of just "bubbling up" the largest value, it also "bubbles down" the smallest value,
     * reducing the number of passes needed compared to standard Bubble Sort.
     *
     * @param numbersToSort The integer array to be sorted.
     */
    public static void sort(int[] numbersToSort) {
        boolean swapped = true; // Flag to track whether a swap has occurred
        int start = 0; // Start index of the unsorted section
        int end = numbersToSort.length - 1; // End index of the unsorted section

        // Continue looping while swaps are happening
        while (swapped) {
            swapped = false; // Reset swapped flag at the beginning of each pass

            // Forward pass (left to right) - Pushes the largest unsorted element to the end
            for (int i = start; i < end; i++) {
                if (numbersToSort[i] > numbersToSort[i + 1]) {
                    // Swap adjacent elements if they are in the wrong order
                    int temp = numbersToSort[i];
                    numbersToSort[i] = numbersToSort[i + 1];
                    numbersToSort[i + 1] = temp;
                    swapped = true; // Mark that a swap occurred
                }
            }
            end--; // Reduce the unsorted section from the right side

            // If no swaps happened, the array is already sorted, so exit early
            if (!swapped) break;

            // Backward pass (right to left) - Pushes the smallest unsorted element to the start
            swapped = false; // Reset swapped flag for the backward pass
            for (int i = end - 1; i >= start; i--) {
                if (numbersToSort[i] > numbersToSort[i + 1]) {
                    // Swap adjacent elements if they are in the wrong order
                    int temp = numbersToSort[i];
                    numbersToSort[i] = numbersToSort[i + 1];
                    numbersToSort[i + 1] = temp;
                    swapped = true; // Mark that a swap occurred
                }
            }
            start++; // Increase the sorted section from the left side
        }
    }
}
